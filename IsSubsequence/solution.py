"""
Given two strings s and t, return true if s is a subsequence of t, or false otherwise.

A subsequence of a string is a new string that is formed from the original string 
by deleting some (can be none) of the characters without disturbing the relative 
positions of the remaining characters. 
(i.e., "ace" is a subsequence of "abcde" while "aec" is not).
"""

import time

def solution1(s: str, t: str) -> bool:


    if len(s) == 0:
            return True

    if len(s) > len(t) or len(t) == 0:
        return False

    i,j = 0,0


    while i < len(s) and j < len(t):
        if s[i] == t[j]:
              i += 1
        
        j += 1

    return j >= len(s)


def solution2(s: str, t: str) -> bool:

    if len(s) == 0:
            return True

    if len(s) > len(t) or len(t) == 0:
        return False

    j = 0

    for v in t:
        if j < len(s):
            if s[j] == v:
                j += 1
            continue
        return True
    return j >= len(s)
 

def solution3(s: str, t: str) -> bool:
    if not s:
        return True
    if len(s) > len(t):
        return False
    t_dex: int = t.find(s[0])
    if t_dex < 0:
        return False
    return True and solution3(s[1:], t[t_dex + 1:])



# Input: s = "abc", t = "ahbgdc"
# Output: true
s = "abc"
t = "ahbgdcasdfasdfasdfasdf"
s = "tbilmhqrexxyeohqcclvnqpjycxokoyihulmcfkmccjrnecvtuarqqbybnqhgqwhyudyinmvwpydyhglpamvmmyhyrfofvfchz"
t = ""

def evaluate_time(callback,s,t):
    start_time = time.time()
    print(callback(s,t))
    # Record the end time
    end_time = time.time()

    # Calculate the elapsed time
    elapsed_time = end_time - start_time

    print(f"Execution time: {elapsed_time:.6f} seconds")

evaluate_time(solution1,s,t)

evaluate_time(solution2,s,t)


evaluate_time(solution3,s,t)


 